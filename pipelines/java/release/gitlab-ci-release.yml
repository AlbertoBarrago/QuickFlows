# GitLab CI/CD Pipeline for Java Release

image: maven:3.8-openjdk-11

variables:
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"
  VERSION: ${CI_COMMIT_TAG}

cache:
  paths:
    - .m2/repository/
    - target/

workflow:
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/

stages:
  - build
  - test
  - package
  - deploy-staging
  - integration-test
  - deploy-production
  - notify

# Build the application
build:
  stage: build
  script:
    - mvn $MAVEN_CLI_OPTS clean compile
  artifacts:
    paths:
      - target/classes/

# Run all tests
test:
  stage: test
  script:
    - mvn $MAVEN_CLI_OPTS test
  artifacts:
    reports:
      junit: target/surefire-reports/TEST-*.xml

# Package the application
package:
  stage: package
  script:
    - mvn $MAVEN_CLI_OPTS package -DskipTests
    - mvn $MAVEN_CLI_OPTS versions:set -DnewVersion=${VERSION:1}
    - mvn $MAVEN_CLI_OPTS deploy -DskipTests
  artifacts:
    paths:
      - target/*.jar
    expire_in: 1 week

# Deploy to staging environment
deploy-staging:
  stage: deploy-staging
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - scp target/*.jar user@staging-server:/opt/app/
    - ssh user@staging-server "sudo systemctl restart app-service"
  environment:
    name: staging
    url: https://staging.example.com

# Run integration tests against staging
integration-test:
  stage: integration-test
  image: postman/newman:alpine
  script:
    - newman run tests/integration/postman_collection.json -e tests/integration/staging-environment.json
  dependencies:
    - deploy-staging

# Deploy to production environment
deploy-production:
  stage: deploy-production
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - scp target/*.jar user@production-server:/opt/app/
    - ssh user@production-server "sudo systemctl restart app-service"
  environment:
    name: production
    url: https://production.example.com
  when: manual

# Send notification about release
notify:
  stage: notify
  image: curlimages/curl:latest
  script:
    - |
      curl -X POST -H "Content-Type: application/json" \
      --data "{\"text\":\"ðŸš€ Release ${VERSION} has been deployed to production!\"}" \
      ${SLACK_WEBHOOK_URL}
  dependencies:
    - deploy-production