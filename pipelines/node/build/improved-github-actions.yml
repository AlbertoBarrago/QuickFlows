name: Improved Node.js Build Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]
      # Don't fail the entire matrix if one version fails
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for proper versioning
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Cache node modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    - name: Install dependencies
      run: npm ci
      # Add error handling for npm install failures
      continue-on-error: false
    
    - name: Check for security vulnerabilities
      run: npm audit --production
      # Don't fail the build on vulnerabilities, but report them
      continue-on-error: true
      
    - name: Check for outdated dependencies
      run: npm outdated || true
      continue-on-error: true
    
    - name: Lint code
      run: npm run lint
      # Generate a report even if linting fails
      continue-on-error: true
      
    - name: Run tests with coverage
      run: npm test -- --coverage
      
    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        fail_ci_if_error: false
        
    - name: Performance metrics
      run: |
        echo "::group::Performance Metrics"
        echo "Build start time: $(date)"
        npm run build --if-present -- --profile
        echo "Build end time: $(date)"
        echo "::endgroup::"
      continue-on-error: true
      
    - name: Build
      run: npm run build
      
    - name: Verify build artifacts
      run: |
        if [ ! -d "dist" ] || [ -z "$(ls -A dist 2>/dev/null)" ]; then
          echo "Error: Build artifacts not found or empty"
          exit 1
        fi
        echo "Build artifacts verified successfully"
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts-${{ matrix.node-version }}
        path: dist/
        retention-days: 7
        
    - name: Set build environment info
      run: |
        echo "NODE_ENV=production" >> $GITHUB_ENV
        echo "BUILD_NUMBER=${{ github.run_number }}" >> $GITHUB_ENV
        echo "BUILD_TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_ENV

    - name: SonarQube Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      # Don't fail the build if SonarQube is unavailable
      continue-on-error: true

  summary:
    needs: build
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Create job summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "* Status: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "* Triggered by: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "* Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "* Workflow: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          
  notify:
    needs: [build, summary]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify success
        if: ${{ needs.build.result == 'success' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: builds
          SLACK_COLOR: good
          SLACK_TITLE: Build Succeeded
          SLACK_MESSAGE: 'Node.js build pipeline completed successfully!'
          SLACK_FOOTER: 'GitHub Actions'

      - name: Notify failure
        if: ${{ needs.build.result == 'failure' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: builds
          SLACK_COLOR: danger
          SLACK_TITLE: Build Failed
          SLACK_MESSAGE: 'Node.js build pipeline failed. Please check the logs.'
          SLACK_FOOTER: 'GitHub Actions'

# Workflow improvements:
# 1. Added fail-fast: false to prevent entire matrix from failing if one version fails
# 2. Added security vulnerability scanning with npm audit
# 3. Improved error handling with continue-on-error for non-critical steps
# 4. Added separate notification job that runs regardless of build outcome
# 5. Enhanced artifact naming with node version
# 6. Added fetch-depth: 0 for proper versioning support
# 7. Added detailed Slack notifications with different messages for success/failure
# 8. Added dependency caching for faster builds
# 9. Added paths-ignore to skip builds for documentation changes
# 10. Added check for outdated dependencies