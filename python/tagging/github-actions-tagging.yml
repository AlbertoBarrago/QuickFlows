name: Python Tagging Pipeline

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  validate-tag:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Get version from tag
      id: get-version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Validate semver format
      run: |
        if [[ ! "${{ steps.get-version.outputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Invalid version format. Must be in format x.y.z"
          exit 1
        fi
  
  update-version:
    needs: validate-tag
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Update version in setup.py/pyproject.toml
      run: |
        VERSION="${{ needs.validate-tag.outputs.version }}"
        
        # Update version in setup.py if it exists
        if [ -f setup.py ]; then
          sed -i "s/version=\".*\"/version=\"${VERSION}\"/g" setup.py
        fi
        
        # Update version in pyproject.toml if it exists
        if [ -f pyproject.toml ]; then
          sed -i "s/version = \".*\"/version = \"${VERSION}\"/g" pyproject.toml
        fi
        
        # Update version in __init__.py if it exists
        if [ -f src/__init__.py ]; then
          sed -i "s/__version__ = \".*\"/__version__ = \"${VERSION}\"/g" src/__init__.py
        elif [ -f package_name/__init__.py ]; then
          sed -i "s/__version__ = \".*\"/__version__ = \"${VERSION}\"/g" package_name/__init__.py
        fi
    
    - name: Generate changelog
      id: changelog
      uses: metcalfc/changelog-generator@v4.0.1
      with:
        myToken: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Update CHANGELOG.md
      run: |
        if [ ! -f CHANGELOG.md ]; then
          echo "# Changelog\n\nAll notable changes to this project will be documented in this file.\n" > CHANGELOG.md
        fi
        
        VERSION="${{ needs.validate-tag.outputs.version }}"
        DATE=$(date +"%Y-%m-%d")
        
        sed -i "4i\\n## [${VERSION}] - ${DATE}\n\n${{ steps.changelog.outputs.changelog }}\n" CHANGELOG.md
    
    - name: Commit and push changes
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: "chore: update version and changelog for v${{ needs.validate-tag.outputs.version }}"
        file_pattern: "setup.py pyproject.toml */__init__.py CHANGELOG.md"
  
  build-and-test:
    needs: [validate-tag, update-version]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.ref }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel pytest pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
    
    - name: Run tests
      run: pytest --cov=./ --cov-report=xml
    
    - name: Build package
      run: python -m build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/
  
  create-github-release:
    needs: [validate-tag, build-and-test]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package
        path: dist/
    
    - name: Generate changelog
      id: changelog
      uses: metcalfc/changelog-generator@v4.0.1
      with:
        myToken: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        body: |
          ## Changes in this Release
          
          ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false
        files: dist/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  publish-pypi:
    needs: [create-github-release]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/project/your-package-name/
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
  
  notify:
    needs: publish-pypi
    runs-on: ubuntu-latest
    steps:
    - name: Send Slack notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        text: 'New version v${{ needs.validate-tag.outputs.version }} has been tagged and published to PyPI! ðŸŽ‰'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}